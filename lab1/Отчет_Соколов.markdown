# Министерство науки и высшего образования Российской Федерации

**Федеральное государственное автономное образовательное учреждение  
высшего образования  
«СЕВЕРО-КАВКАЗСКИЙ ФЕДЕРАЛЬНЫЙ УНИВЕРСИТЕТ»**

*Департамент цифровых, робототехнических систем и электроники института перспективной инженерии*

---

## Отчет по лабораторной работе №1 
### дисциплины "Администрирование баз данных"

**Выполнил:** Соколов Михаил Романович  
4 курс, группа ПИЖ-б-о-22-1  
09.03.04 "Программная инженерия"  
направленность (профиль) "Разработка и сопровождение программного обеспечения"  
очная форма обучения

**Руководитель практики:** Щеголев Алексей Алексеевич  
старший преподаватель департамента цифровых, робототехнических систем и электроники института перспективной инженерии

---

## Тема работы
Архитектура СУБД и конфигурация

## Цель работы
Изучить базовые компоненты архитектуры PostgreSQL (процессы, память) и получить практические навыки управления конфигурационными параметрами сервера на разных уровнях (экземпляр, сеанс). Освоить работу с основными и дополнительными файлами конфигурации, а также с представлениями `pg_settings` и `pg_file_settings`.

---

## Ход выполнения работы

### Часть 1. Исследование параметров и файлов конфигурации

#### 1. Текущая конфигурация
Выполнено подключение к серверу с помощью `psql`. Определено расположение основного файла конфигурации (`postgresql.conf`) с помощью команды `SHOW config_file;`:

![alt text](./images/image.png)
*Рисунок 1 - Определение расположения файла конфигурации*

#### 2. Анализ параметров
Изучено представление `pg_settings`. Найдены параметры, для изменения которых требуется перезагрузка сервера (`context = 'postmaster'`). Определены 2-3 параметра с контекстом `sighup` и `user`:

![alt text](./images/image-1.png)
*Рисунок 2 - Команда вывода параметров pg_settings*

![alt text](./images/image-2.png)
*Рисунок 3 - Пример параметров pg_settings*

![alt text](./images/image-3.png)
*Рисунок 4 - Команда вывода параметров с фильтром контекста "postmaster"*

![alt text](./images/image-4.png)
*Рисунок 5 - Пример параметров с фильтром контекста "postmaster"*

![alt text](./images/image-5.png)
*Рисунок 6 - Команды вывода параметров контекстов "sighup" и "user"*

#### 3. Анализ файлов
Изучено представление `pg_file_settings`. Определено, из каких файлов и с какими значениями были считаны текущие настройки параметров `shared_buffers` и `work_mem`:

![alt text](./images/image-6.png)
*Рисунок 7 - Записи представления pg_file_settings*

![alt text](./images/image-7.png)
*Рисунок 8 - Определение значений параметров shared_buffers и work_mem*

Представления `pg_settings` и `pg_file_settings` являются ключевыми инструментами для анализа конфигурации PostgreSQL. Они позволяют администратору получить полную информацию о текущих настройках, их источниках и требованиях к применению изменений. Особенно важным является понимание контекстов параметров: `postmaster` требует полного перезапуска сервера, `sighup` - только перечитывания конфигурации, а `user` - может быть изменен на уровне сеанса.

### Часть 2. Управление параметрами на уровне экземпляра

#### 1. Изменение через ALTER SYSTEM
Использована команда `ALTER SYSTEM` для установки нового значения параметра `work_mem`. Проверено, что изменение записалось в файл `postgresql.auto.conf` с помощью функции `pg_read_file`. Применено изменение путем перечитывания конфигурации (`SELECT pg_reload_conf();`). Проверено новое значение параметра и его источник в `pg_settings`:

![alt text](./images/image-8.png)
*Рисунок 9 - Манипулирование значением параметра work_mem*

#### 2. Изменение через дополнительный файл
Создан файл в каталоге, указанном в директиве `include_dir` основного конфигурационного файла. Установлено значение для параметра `log_min_duration_statement` в этом файле. Применено изменение и проверен результат:

![alt text](./images/image-9.png)
*Рисунок 10 - Начальное значение параметра log_min_duration_statement*

![alt text](./images/image-10.png)
*Рисунок 11 - Проверка нового файла конфигурации*

![alt text](./images/image-11.png)
*Рисунок 12 - Применение изменений*

#### 3. Ошибка в конфигурации
Намеренно внесена синтаксическая ошибка в один из конфигурационных файлов (установлено значение `invalid_value` вместо числового значения). Выполнена попытка перечитать конфигурацию. Изучено представление `pg_file_settings` для поиска записи об ошибке. Ошибка исправлена, конфигурация перечитана повторно:

![alt text](./images/image-12.png)
*Рисунок 13 - Установка некорректного значения параметру log_min_duration_statement*

![alt text](./images/image-13.png)
*Рисунок 14 - Ошибка применения изменений значения параметра log_min_duration_statement*

Управление параметрами на уровне экземпляра предоставляет мощные инструменты для системного администрирования. Команда `ALTER SYSTEM` обеспечивает безопасное изменение настроек с автоматической записью в `postgresql.auto.conf`, что исключает необходимость ручного редактирования файлов конфигурации. Использование дополнительных файлов через директиву `include_dir` позволяет организовать модульную структуру конфигурации, упрощая управление различными аспектами настройки сервера. Механизм обнаружения ошибок в `pg_file_settings` обеспечивает надежную диагностику проблем конфигурации без компрометации стабильности системы.

### Часть 3. Управление параметрами на уровне сеанса

#### 1. Команда SET
В рамках сеанса изменено значение параметра `work_mem` с помощью `SET`. Проверено новое значение. Завершена транзакция с помощью `ROLLBACK` и проверено значение параметра:

![alt text](./images/image-14.png)
*Рисунок 15 - Изменение параметра work_mem и откат значения*

Результат показывает, что команда `SET` изменяет параметр на уровне сеанса, и значение сохраняется независимо от операций с транзакциями. `ROLLBACK` влияет только на данные в транзакции, но не на настройки параметров сеанса.

#### 2. Команда SET LOCAL
Открыта транзакция (`BEGIN`). Внутри транзакции изменен параметр `work_mem` с помощью `SET LOCAL`. Проверено изменение. После фиксации транзакции (`COMMIT`) снова проверено значение параметра:

![alt text](./images/image-15.png)
*Рисунок 16 - Изменение параметра на время транзакции*

Результат демонстрирует, что `SET LOCAL` устанавливает значение параметра только на время текущей транзакции. После завершения транзакции (как при `COMMIT`, так и при `ROLLBACK`) значение параметра возвращается к предыдущему состоянию.

#### 3. Пользовательский параметр
Создан и установлен пользовательский параметр с именем, содержащим точку (`app.my_setting`). Прочитано его значение с помощью функции `current_setting`:

![alt text](./images/image-16.png)
*Рисунок 17 - Установка и чтение пользовательского параметра*

Управление параметрами на уровне сеанса предоставляет гибкие возможности для настройки поведения PostgreSQL для конкретных подключений и задач. Различие между `SET` и `SET LOCAL` критично для понимания области действия изменений: первая команда действует на весь сеанс, вторая - только в рамках транзакции. Пользовательские параметры открывают возможности для создания настраиваемых приложений, позволяя передавать специфичную для приложения конфигурацию через стандартные механизмы PostgreSQL.

---

## Выводы

В ходе выполнения лабораторной работы были изучены основные механизмы управления конфигурацией PostgreSQL и получены практические навыки работы с различными уровнями настроек параметров. Освоена работа с представлениями `pg_settings` и `pg_file_settings`, которые являются фундаментальными инструментами администрирования, позволяющими получать детальную информацию о текущей конфигурации системы, источниках параметров и требованиях к их применению. Практическое изучение различных контекстов параметров (`postmaster`, `sighup`, `user`) продемонстрировало важность понимания архитектуры PostgreSQL для эффективного управления настройками.

Работа с различными способами управления параметрами выявила принципиальные различия между уровнями конфигурации и механизмами их применения. Управление на уровне экземпляра через `ALTER SYSTEM` и дополнительные файлы конфигурации обеспечивает системные изменения, действующие для всех подключений и сохраняющиеся после перезапуска сервера. Эти методы требуют административных привилегий и влияют на глобальную конфигурацию. В противоположность этому, управление на уровне сеанса (`SET` и `SET LOCAL`) предназначено для временных настроек, специфичных для конкретного подключения. Команда `SET` изменяет параметр на время сеанса, в то время как `SET LOCAL` ограничивает изменение рамками текущей транзакции. Понимание этих различий критично для разработки эффективных стратегий конфигурирования как на системном уровне, так и на уровне приложений, обеспечивая оптимальную производительность и безопасность PostgreSQL в различных сценариях использования.